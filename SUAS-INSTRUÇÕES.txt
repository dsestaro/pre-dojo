##### Resolução: #####
Para resolver o problema preferi utilizar uma abordagem web, pois dessa forma conseguiria mostrar uma gama maior de conhecimentos. Para o controle da aplicação, server-side, utilizei o framework Spring-Boot por disponibilizar um metodologia de desenvolvimento ágil. A criação do projeto foi realizada utilizando o framework Spring Initializr junto ao Maven, para dessa forma tentar minimizar o tempo gasto com a configuração do projeto. O web conteiner utilizado foi um TomCat embarcado na aplicação, para falicitar o teste e o deploy da aplicação, visto que o objetivo é apenas uma demo. Por ser processamento de arquivos não relacionados, não vi a necessidade de gravação em banco de dados ou a persistência em memória dos resultados, portanto os dados são perdidos com o fim da execução, outro motivo que me fez utilizar uma solução web, pois os dados ficarão na tela do usuário até o refresh.

Devido ao curto tempo, o desenvolvimento e o planejamento foi feito da seguinte forma: (i)implementei as funcionalidades básicas pedidas; (ii) com o tempo restante foi adicionando algumas novas funcionalidades. Esse planejamento foi feito para que não fosse entregue códigos feitos pela metade.	

##### Observações: #####
As classes estão sem javadoc pois devido ao curto prazo tive que optar por um desenvolvimento com comentários ou o TDD, como os próprios testes e nomes coerentes para métodos e variáveis são uma forma de documentação aceitável, preferi ir por esse caminho.

Sobre o repositório, preferi explicitar todos os meus commits e não usar nenhuma técnica de agrupamento de commit no momento do push, pois assim ficará claro a linha de pensamento que usei durante o desenvolvimento, além de ser uma boa prática.

##### Restrições: #####
- O arquivo deve ter um tamanho máximo de 2MB.
- A solução processa um arquivo por vez para cada usuário.

#### Tecnologias Utilizadas e Motivações ####
- [Spring]		- Framework MVC mais conhecido no mercado.
- [Spring Boot]	- Framework para desenvolvimento ágil de projetos, foi escolhido por configurar automaticamente o Spring, além de conseguir rodar uma versão standalone da aplicação gerada.
- [Spring IO]	- Utilizado para criar o projeto inicial, adicionando ao pom.xml as principais dependências selecionadas por mim, assim como criando toda a estrutura do projeto.
- [JUnit]		- Ferramenta de testes amplamente utilizada.
- [Log4J]		- Ferramenta de log utilizada por todos os frameworks
- [REST Assured]- Framework para realização de testes utilizando chamadas REST
- [Gson]		- Framework para a serialização de dados.
- [AngularJS]	- Framework para tratar a camada js no clint-side, facilita o desenvolvimento.
- [Ng File Upload]- Conjunto de diretivas do angular e classes para upload de arquivo na forma de multipart.
- [Guava]		- Framework utilizado apenas para parsear inputstream em string.
- [Spring Initializr]
				- Framework utilizado na criação do projeto.

 
#### Como executar o projeto ####

##### Para a execução e compilação do projeto é necessário o framework [Maven] instalado. #####

para realizar a execução do projeto deve-se executar os seguintes comandos na ordem aprensetada:

Para compilar o projeto e rodar os testes

mvn clean install


Start da aplicação

mvn spring-boot:run


Após rodar o comando apresentado acima o basta acessar o endereço http://localhost:8080/ e a página estará disponível para processamento dos arquivos. A aplicação está configurada para realizar os testes, mesmo os com chamadas REST, via Maven.